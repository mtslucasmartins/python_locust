from locust import HttpLocust, TaskSet, task
from credentials import USER_CREDENTIALS

from http_utils import HttpStatus

DOMAIN = 'https://development-api-comunicacao.herokuapp.com'


class WebsiteTasks(TaskSet):

    def __init__(self, parent):
        super(WebsiteTasks, self).__init__(parent)
        self.email = ""
        self.password = ""

        self.access_token = ""
        self.user_details = {}
        self.headers = {}

    def on_start(self):
        print('WebsiteTasks.on_start')
        print(HttpStatus.OK)

        if len(USER_CREDENTIALS) > 0:
            self.email, self.password = USER_CREDENTIALS.pop()

            authorize_response = self.client.post("/services/auth/token", json={
                "email": self.email,
                "password": self.password
            }, headers={
                'Accept': 'application/json', 
                'Content-Type': 'application/json'
            })

            if authorize_response.status_code == HttpStatus.OK:
                authorize_json_response = authorize_response.json()

                status = authorize_json_response.get('status', 'error')

                if status == 'success':
                    record = authorize_json_response.get('record')

                    self.access_token = record.get('token')
                    self.user_details = record.get('user')

                    self.headers = {'Authorization': 'Bearer ' + self.access_token, 'Content-Type': 'application/json'}
                else:
                    print("""\n
                        Email: {}
                        Password: {}
                    """.format(self.email, self.password))
                    self.interrupt()
            else:   
                print("""\n
                    Email: {}
                    Password: {}
                """.format(self.email, self.password))
                self.interrupt()

    # @task # "/services/contacts/{}/chat_summary?page_size=20&page_index=0"
    def get_chat_summary(self):
        if self.user_details.get('contact') is not None:
            url = "/services/contacts/{}/chat_summary?page_size=20&page_index=0".format(self.user_details.get('contact').get('id'))
            body = {
                "subject": "",
                "contactFrom": {
                    "id": None,
                    "externalId": "",
                    "description": "",
                    "shortDescription": "",
                    "thumbnail": ""
                },
                "contactTo": {
                    "id": None,
                    "externalId": "",
                    "description": "",
                    "shortDescription": "",
                    "thumbnail": ""
                },
                "participant": {
                    "id": None,
                    "externalId": "",
                    "description": "",
                    "shortDescription": "",
                    "thumbnail": ""
                }
            }
            response = self.client.post(url, json=body, headers=self.headers)

            if response.status_code == 401:
                print('Unauthorized')
                self.interrupt()


    @task # "/services/contacts/{}/contacts"
    def get_contacts(self):
        if self.user_details.get('contact') is not None:
            url = "/services/contacts/{}/contacts?limit=20".format(self.user_details.get('contact').get('id'))
            response = self.client.get(url, headers=self.headers)


class WebsiteUser(HttpLocust):
    task_set = WebsiteTasks
    min_wait = 4000
    max_wait = 5000